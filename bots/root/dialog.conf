# a dialog node consists of a string-generating lambda followed by a list of options.
# Each option is also a list of number, string and action. The action is an lambda.
#
# See the Poet for an example (look at the config and the main.topic)
    
# this goes to a new node in a dialog and shows its text if "showtext" is true
# Prerequisite:
#   ?dialog     holds the current dialog (conv. variable)

:dgobase |n,sh:oldnode,t|
    ?dialognode !oldnode # just in case things go wrong
    # get the node we want to go to
    ?n ?dialog get !node # get the node structure
    ?n !dialognode # copy the name over
    ?node isnone if
        # unknown node, get the old one back
        "Eh?". ?oldnode !dialognode
    then
    ?node isnone not if # again, just in case it was bad before!
        # got a node, output the node's string by calling the 
        # function and running dsay (if sh is set)
        ?sh if
            ?node fst call json jsonsend
        then
        # now output the options!
        1 ?node len range each loop
            # the action, with a click on it - it just makes the user say the number
            # (see dialog.topic for how this works)
            i json "yellow" jsoncol 1 jsonbold i "\n" + jsonclick
            # now the text
            " " +
            i ?node get fst + "white" jsoncol 0 jsonbold
            jsonsend
        endloop
    then
    "" # dummy string
;

# go to a new node, showing the text

:dgo 1 dgobase;

# this says something in a dialog context, by building it as a JSON string.
# Note that the automatic line wrapping stuff won't work with these!
# Remember to dstay or dgo after this

:dsay |t:|
    ?t json jsonsend
;

# same as dsay but doesn't reengage dialog
:dleave |t:|
    ?t json jsonsend
    none!dialog
;

# just stay at the same dialog, giving it again without saying the
# base text
:dstay
    ?dialognode 0 dgobase
;

# start a dialog. Takes start node name and dialog.
:dstart |n,d:|
    ?d !dialog
    ?n dgo
;

